{"ast":null,"code":"// 对 axios二次封装\nimport { Toast } from \"antd-mobile\";\nimport axios from \"axios\";\nimport { getTokenInfo, hasToken } from \"./storage\";\nimport { createMemoryRouter } from \"react-router-dom\";\nconst requests = axios.create({\n  // 配置对象\n  // 基础路劲，发请求的时候，路径当中会出现api，不红你手写\n  baseURL: 'http://geek.itheima.net/v1_0',\n  // 请求超时\n  timeout: 5000\n}); // 请求拦截器：在发送请求前，请求拦截器可以检测到，可以在请求发出去前做一些事情\n\nrequests.interceptors.request.use(config => {\n  // config是一个配置对象，对象里面有一个属性很重要，headers请求头\n  if (hasToken) {\n    const token = getTokenInfo().token;\n    config.headers.Authorization = 'Bearer ' + token;\n  }\n\n  return config;\n}, err => {\n  return Promise.reject(err);\n});\nrequests.interceptors.response.use(res => {\n  // 成功的回调函数，服务器响应数据回来以后，响应拦截器可以检测到，可以做一些事情，\n  return res.data;\n}, err => {\n  // 如果因为网络原因 response没有，给提示消息\n  if (!err.response) {\n    Toast.show({\n      content: '网络繁忙，请稍后再试!'\n    });\n    return Promise.reject(err);\n  } // 不是token失效的原因\n\n\n  if (err.response.state !== 401) {\n    Toast.show({\n      content: err.response.data.message\n    });\n    return Promise.reject(err);\n  } // 网络没问题 ， 且是401，token失效\n  // 判断有没有刷新token\n\n\n  const {\n    token,\n    refresh_token\n  } = getTokenInfo();\n\n  if (!token || !refresh_token) {\n    // 没token，跳转至登录页\n    Navigator;\n    console.log(Navigator);\n  }\n});\nexport default requests;","map":{"version":3,"names":["Toast","axios","getTokenInfo","hasToken","createMemoryRouter","requests","create","baseURL","timeout","interceptors","request","use","config","token","headers","Authorization","err","Promise","reject","response","res","data","show","content","state","message","refresh_token","Navigator","console","log"],"sources":["/Users/tonystark/code/VSCodeProject/react/gk-h5/src/utils/request.js"],"sourcesContent":["// 对 axios二次封装\nimport { Toast } from \"antd-mobile\";\nimport axios from \"axios\";\nimport { getTokenInfo, hasToken } from \"./storage\";\nimport { createMemoryRouter } from \"react-router-dom\";\n\n\nconst requests = axios.create({\n    // 配置对象\n    // 基础路劲，发请求的时候，路径当中会出现api，不红你手写\n    baseURL: 'http://geek.itheima.net/v1_0',\n    // 请求超时\n    timeout: 5000\n});\n// 请求拦截器：在发送请求前，请求拦截器可以检测到，可以在请求发出去前做一些事情\nrequests.interceptors.request.use(config => {\n    // config是一个配置对象，对象里面有一个属性很重要，headers请求头\n    if(hasToken){\n        const token = getTokenInfo().token;\n        config.headers.Authorization = 'Bearer ' + token;\n    }\n    return config;\n}, err => {\n    return Promise.reject(err);\n});\n\nrequests.interceptors.response.use(res => {\n    // 成功的回调函数，服务器响应数据回来以后，响应拦截器可以检测到，可以做一些事情，\n    return res.data;\n}, err => {\n\n    // 如果因为网络原因 response没有，给提示消息\n    if(!err.response){\n        Toast.show({\n            content: '网络繁忙，请稍后再试!',\n        });\n        return Promise.reject(err);\n    }\n\n    // 不是token失效的原因\n    if(err.response.state !== 401){\n        Toast.show({\n            content: err.response.data.message,\n        })\n        return Promise.reject(err);\n    }\n    // 网络没问题 ， 且是401，token失效\n    // 判断有没有刷新token\n    const {token, refresh_token} = getTokenInfo();\n    if(!token||!refresh_token){\n        // 没token，跳转至登录页\n        Navigator\n        console.log(Navigator);\n    }\n     \n    \n});\nexport default requests;\n\n"],"mappings":"AAAA;AACA,SAASA,KAAT,QAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,WAAvC;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AAGA,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa;EAC1B;EACA;EACAC,OAAO,EAAE,8BAHiB;EAI1B;EACAC,OAAO,EAAE;AALiB,CAAb,CAAjB,C,CAOA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkCC,MAAM,IAAI;EACxC;EACA,IAAGT,QAAH,EAAY;IACR,MAAMU,KAAK,GAAGX,YAAY,GAAGW,KAA7B;IACAD,MAAM,CAACE,OAAP,CAAeC,aAAf,GAA+B,YAAYF,KAA3C;EACH;;EACD,OAAOD,MAAP;AACH,CAPD,EAOGI,GAAG,IAAI;EACN,OAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH,CATD;AAWAX,QAAQ,CAACI,YAAT,CAAsBU,QAAtB,CAA+BR,GAA/B,CAAmCS,GAAG,IAAI;EACtC;EACA,OAAOA,GAAG,CAACC,IAAX;AACH,CAHD,EAGGL,GAAG,IAAI;EAEN;EACA,IAAG,CAACA,GAAG,CAACG,QAAR,EAAiB;IACbnB,KAAK,CAACsB,IAAN,CAAW;MACPC,OAAO,EAAE;IADF,CAAX;IAGA,OAAON,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;EACH,CARK,CAUN;;;EACA,IAAGA,GAAG,CAACG,QAAJ,CAAaK,KAAb,KAAuB,GAA1B,EAA8B;IAC1BxB,KAAK,CAACsB,IAAN,CAAW;MACPC,OAAO,EAAEP,GAAG,CAACG,QAAJ,CAAaE,IAAb,CAAkBI;IADpB,CAAX;IAGA,OAAOR,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;EACH,CAhBK,CAiBN;EACA;;;EACA,MAAM;IAACH,KAAD;IAAQa;EAAR,IAAyBxB,YAAY,EAA3C;;EACA,IAAG,CAACW,KAAD,IAAQ,CAACa,aAAZ,EAA0B;IACtB;IACAC,SAAS;IACTC,OAAO,CAACC,GAAR,CAAYF,SAAZ;EACH;AAGJ,CA9BD;AA+BA,eAAetB,QAAf"},"metadata":{},"sourceType":"module"}