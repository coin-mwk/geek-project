{"ast":null,"code":"var _jsxFileName = \"/Users/tonystark/code/VSCodeProject/react/gk-h5/src/components/Tabs/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport styles from './index.module.scss';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tabs = _ref => {\n  _s();\n\n  let {\n    index = 0,\n    tabs = [],\n    children,\n    onChange\n  } = _ref;\n  const navRef = useRef();\n  const lineRef = useRef();\n  const [activeIndex, setActiveIndex] = useState(index);\n\n  const changeTab = index => {\n    setActiveIndex(index);\n    onChange && onChange(index);\n  }; // https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\n  // https://github.com/facebook/react/issues/14830\n\n\n  useEffect(() => {\n    setActiveIndex(index);\n  }, [index]);\n  useEffect(() => {\n    // TODO: 清理上一次的 animate\n    const activeTab = navRef.current.children[activeIndex];\n    if (!activeTab) return;\n    const activeTabWidth = activeTab.offsetWidth || 60; // 注意：第一次获取 offsetLeft 值为 0 ，以后每次获取为 8\n    //      所以，设置默认值 8，让所有情况下 offsetLeft 值都相同\n\n    const activeOffsetLeft = activeTab.offsetLeft || 8;\n    const tabWidth = navRef.current.offsetWidth || 289;\n    const to = activeOffsetLeft - (tabWidth - activeTabWidth) / 2; // navRef.current.scrollLeft = to\n\n    const from = navRef.current.scrollLeft;\n    const frames = Math.round(0.2 * 1000 / 16);\n    let count = 0;\n\n    function animate() {\n      navRef.current.scrollLeft += (to - from) / frames;\n\n      if (++count < frames) {\n        requestAnimationFrame(animate);\n      }\n    }\n\n    animate(); // window.innerWidth / 375： 手动处理 JS 移动端适配\n    // 说明：15 表示 Line 宽度的一半\n\n    lineRef.current.style.transform = `translateX(${activeOffsetLeft + activeTabWidth / 2 - 15 * (window.innerWidth / 375)}px)`; // 注意： 由于 tabs 数据是动态获取的，所以，为了能够在 tabs 数据加载完成后\n    //       获取到 tab，所以，此处将 tabs 作为依赖项。\n    //       否则，会导致 navRef.current.children[activeIndex] 拿到的是 line 而不是第一个tab\n  }, [activeIndex, tabs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.root,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tabs-wrap\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tabs-nav\",\n          ref: navRef,\n          children: [tabs.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classnames('tab', i === activeIndex ? 'active' : ''),\n            onClick: () => changeTab(i),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tab-line\",\n            ref: lineRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tabs-content\",\n        children: React.Children.map(children, (child, index) => {\n          var _tabs$activeIndex;\n\n          return (\n            /*#__PURE__*/\n            // 为每个子元素包裹一个 div，用来控制显示或隐藏\n            _jsxDEV(\"div\", {\n              className: \"tabs-content-wrap\",\n              style: {\n                display: index === activeIndex ? 'block' : 'none'\n              },\n              children:\n              /*#__PURE__*/\n              // 为每个子元素生成副本，并传入选中选项卡的 id 值\n              React.cloneElement(child, {\n                aid: ((_tabs$activeIndex = tabs[activeIndex]) === null || _tabs$activeIndex === void 0 ? void 0 : _tabs$activeIndex.id) || 0\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)\n          );\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tabs, \"4ggDNAK050ouUWDsQa584Ld6KL8=\");\n\n_c = Tabs;\nTabs.propTypes = {\n  tabs: PropTypes.array.isRequired\n};\nexport default Tabs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tabs\");","map":{"version":3,"names":["useEffect","useState","useRef","classnames","PropTypes","styles","React","Tabs","index","tabs","children","onChange","navRef","lineRef","activeIndex","setActiveIndex","changeTab","activeTab","current","activeTabWidth","offsetWidth","activeOffsetLeft","offsetLeft","tabWidth","to","from","scrollLeft","frames","Math","round","count","animate","requestAnimationFrame","style","transform","window","innerWidth","root","map","item","i","name","Children","child","display","cloneElement","aid","id","propTypes","array","isRequired"],"sources":["/Users/tonystark/code/VSCodeProject/react/gk-h5/src/components/Tabs/index.jsx"],"sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport classnames from 'classnames'\nimport PropTypes from 'prop-types'\n\nimport styles from './index.module.scss'\nimport React from 'react'\n\nconst Tabs = ({ index = 0, tabs = [], children, onChange }) => {\n  const navRef = useRef()\n  const lineRef = useRef()\n\n  const [activeIndex, setActiveIndex] = useState(index)\n\n  const changeTab = index => {\n    setActiveIndex(index)\n    onChange && onChange(index)\n  }\n\n  // https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\n  // https://github.com/facebook/react/issues/14830\n  useEffect(() => {\n    setActiveIndex(index)\n  }, [index])\n\n  useEffect(() => {\n    // TODO: 清理上一次的 animate\n\n    const activeTab = navRef.current.children[activeIndex]\n    if (!activeTab) return\n\n    const activeTabWidth = activeTab.offsetWidth || 60\n    // 注意：第一次获取 offsetLeft 值为 0 ，以后每次获取为 8\n    //      所以，设置默认值 8，让所有情况下 offsetLeft 值都相同\n    const activeOffsetLeft = activeTab.offsetLeft || 8\n    const tabWidth = navRef.current.offsetWidth || 289\n\n    const to = activeOffsetLeft - (tabWidth - activeTabWidth) / 2\n    // navRef.current.scrollLeft = to\n    const from = navRef.current.scrollLeft\n    const frames = Math.round((0.2 * 1000) / 16)\n    let count = 0\n    function animate() {\n      navRef.current.scrollLeft += (to - from) / frames\n\n      if (++count < frames) {\n        requestAnimationFrame(animate)\n      }\n    }\n\n    animate()\n\n    // window.innerWidth / 375： 手动处理 JS 移动端适配\n    // 说明：15 表示 Line 宽度的一半\n    lineRef.current.style.transform = `translateX(${\n      activeOffsetLeft + activeTabWidth / 2 - 15 * (window.innerWidth / 375)\n    }px)`\n\n    // 注意： 由于 tabs 数据是动态获取的，所以，为了能够在 tabs 数据加载完成后\n    //       获取到 tab，所以，此处将 tabs 作为依赖项。\n    //       否则，会导致 navRef.current.children[activeIndex] 拿到的是 line 而不是第一个tab\n  }, [activeIndex, tabs])\n\n  return (\n    <div className={styles.root}>\n      <div className=\"tabs\">\n        <div className=\"tabs-wrap\">\n          <div className=\"tabs-nav\" ref={navRef}>\n            {tabs.map((item, i) => (\n              <div\n                className={classnames('tab', i === activeIndex ? 'active' : '')}\n                key={i}\n                onClick={() => changeTab(i)}\n              >\n                <span>{item.name}</span>\n              </div>\n            ))}\n            <div className=\"tab-line\" ref={lineRef}></div>\n          </div>\n        </div>\n\n        <div className=\"tabs-content\">\n          {React.Children.map(children, (child, index) => {\n            return (\n              // 为每个子元素包裹一个 div，用来控制显示或隐藏\n              <div className=\"tabs-content-wrap\" style={{ display: index === activeIndex ? 'block' : 'none' }}>\n                {\n                  // 为每个子元素生成副本，并传入选中选项卡的 id 值\n                  React.cloneElement(child, { aid: tabs[activeIndex]?.id || 0 })\n                }\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nTabs.propTypes = {\n  tabs: PropTypes.array.isRequired\n}\n\nexport default Tabs\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}