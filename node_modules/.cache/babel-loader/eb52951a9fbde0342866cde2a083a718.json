{"ast":null,"code":"var _jsxFileName = \"/Users/tonystark/code/VSCodeProject/react/gk-h5/src/components/Image/index.jsx\",\n    _s = $RefreshSig$();\n\nimport classnames from 'classnames';\nimport { useEffect, useRef, useState } from 'react';\nimport Icon from '../Icon';\nimport styles from './index.module.scss';\n/**\n * 拥有懒加载特性的图片组件\n * @param {String} props.src 图片地址\n * @param {String} props.className 样式类\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Image = _ref => {\n  _s();\n\n  let {\n    src,\n    className\n  } = _ref;\n  // 记录图片加载是否出错的状态\n  const [isError, setIsError] = useState(false); // 记录图片是否正在加载的状态\n\n  const [isLoading, setIsLoading] = useState(true); // 对图片元素的引用\n\n  const imgRef = useRef(null); // 在组件创建时\n\n  useEffect(() => {\n    // 新建一个浏览器 IntersectionObserver 对象\n    // 用来监听 img 图片元素是否和视口交叉（即出现在可视区域）\n    const observer = new IntersectionObserver((entries, imgObserver) => {\n      // console.log(entries, imgObserver)\n      entries.forEach(entry => {\n        console.log(entry.target); // 如果出现在可视区域，则将存放在 img 标签 data-src 属性中的图片地址，\n        // 设置到 src 属性上，即开始真正加载图片\n\n        if (entry.isIntersecting) {\n          console.log(\"===\", imgRef.current.dataset.src);\n          imgRef.current.src = imgRef.current.dateset.src;\n          observer.unobserve(imgRef.current);\n        }\n      });\n    }); // 开始监听\n\n    observer.observe(imgRef.current); // 组件销毁时\n\n    return () => {\n      // 停止 IntersectionObserver 对象的监听\n      observer.disconnect();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classnames(styles.root, className),\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-icon\",\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        type: \"icon-photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-icon\",\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        type: \"icon-photo-fail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), !isError && /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"\",\n      \"data-src\": src,\n      ref: imgRef,\n      onLoad: () => setIsLoading(false),\n      onError: () => setIsError(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Image, \"Mg3LyvC+zcSX4a8n5TqwkLCCmVs=\");\n\n_c = Image;\nexport default Image;\n\nvar _c;\n\n$RefreshReg$(_c, \"Image\");","map":{"version":3,"names":["classnames","useEffect","useRef","useState","Icon","styles","Image","src","className","isError","setIsError","isLoading","setIsLoading","imgRef","observer","IntersectionObserver","entries","imgObserver","forEach","entry","console","log","target","isIntersecting","current","dataset","dateset","unobserve","observe","disconnect","root"],"sources":["/Users/tonystark/code/VSCodeProject/react/gk-h5/src/components/Image/index.jsx"],"sourcesContent":["import classnames from 'classnames';\nimport { useEffect, useRef, useState } from 'react';\nimport Icon from '../Icon';\nimport styles from './index.module.scss';\n\n/**\n * 拥有懒加载特性的图片组件\n * @param {String} props.src 图片地址\n * @param {String} props.className 样式类\n */\nconst Image = ({ src, className }) => {\n    // 记录图片加载是否出错的状态\n    const [isError, setIsError] = useState(false)\n\n    // 记录图片是否正在加载的状态\n    const [isLoading, setIsLoading] = useState(true)\n\n    // 对图片元素的引用\n    const imgRef = useRef(null)\n    // 在组件创建时\n    useEffect(() => {\n        // 新建一个浏览器 IntersectionObserver 对象\n        // 用来监听 img 图片元素是否和视口交叉（即出现在可视区域）\n        const observer = new IntersectionObserver((entries, imgObserver) => {\n            // console.log(entries, imgObserver)\n            entries.forEach(entry => {\n            console.log(entry.target)\n\n                // 如果出现在可视区域，则将存放在 img 标签 data-src 属性中的图片地址，\n                // 设置到 src 属性上，即开始真正加载图片\n                if (entry.isIntersecting) {\n                    console.log(\"===\",imgRef.current.dataset.src)\n                    imgRef.current.src  = imgRef.current.dateset.src\n                   observer.unobserve(imgRef.current)\n                }\n            })\n        })\n\n        // 开始监听\n        observer.observe(imgRef.current)\n        // 组件销毁时\n        return () => {\n            // 停止 IntersectionObserver 对象的监听\n            observer.disconnect()\n        }\n    }, [])\n\n    return (\n        <div className={classnames(styles.root, className)}>\n             {/* <div className=\"image-icon\">\n                    <Icon type=\"icon-photo\" />\n                </div>\n                <div className=\"image-icon\">\n                    <Icon type=\"icon-photo-fail\" />\n                </div> */}\n            {/* 正在加载时显示的内容 */}\n            {isLoading && (\n                <div className=\"image-icon\">\n                    <Icon type=\"icon-photo\" />\n                </div>\n            )}\n\n            {/* 加载出错时显示的内容 */}\n            {isError && (\n                <div className=\"image-icon\">\n                    <Icon type=\"icon-photo-fail\" />\n                </div>\n            )}\n\n            {/* 加载成功时显示的内容 */}\n            {!isError && (\n                <img alt=\"\"\n                    data-src={src}\n                    ref={imgRef}\n                    onLoad={() => setIsLoading(false)}\n                    onError={() => setIsError(true)}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default Image\n"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,KAAK,GAAG,QAAwB;EAAA;;EAAA,IAAvB;IAAEC,GAAF;IAAOC;EAAP,CAAuB;EAClC;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC,CAFkC,CAIlC;;EACA,MAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C,CALkC,CAOlC;;EACA,MAAMU,MAAM,GAAGX,MAAM,CAAC,IAAD,CAArB,CARkC,CASlC;;EACAD,SAAS,CAAC,MAAM;IACZ;IACA;IACA,MAAMa,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,CAACC,OAAD,EAAUC,WAAV,KAA0B;MAChE;MACAD,OAAO,CAACE,OAAR,CAAgBC,KAAK,IAAI;QACzBC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAlB,EADyB,CAGrB;QACA;;QACA,IAAIH,KAAK,CAACI,cAAV,EAA0B;UACtBH,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBR,MAAM,CAACW,OAAP,CAAeC,OAAf,CAAuBlB,GAAzC;UACAM,MAAM,CAACW,OAAP,CAAejB,GAAf,GAAsBM,MAAM,CAACW,OAAP,CAAeE,OAAf,CAAuBnB,GAA7C;UACDO,QAAQ,CAACa,SAAT,CAAmBd,MAAM,CAACW,OAA1B;QACF;MACJ,CAVD;IAWH,CAbgB,CAAjB,CAHY,CAkBZ;;IACAV,QAAQ,CAACc,OAAT,CAAiBf,MAAM,CAACW,OAAxB,EAnBY,CAoBZ;;IACA,OAAO,MAAM;MACT;MACAV,QAAQ,CAACe,UAAT;IACH,CAHD;EAIH,CAzBQ,EAyBN,EAzBM,CAAT;EA2BA,oBACI;IAAK,SAAS,EAAE7B,UAAU,CAACK,MAAM,CAACyB,IAAR,EAActB,SAAd,CAA1B;IAAA,WAQKG,SAAS,iBACN;MAAK,SAAS,EAAC,YAAf;MAAA,uBACI,QAAC,IAAD;QAAM,IAAI,EAAC;MAAX;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QATR,EAeKF,OAAO,iBACJ;MAAK,SAAS,EAAC,YAAf;MAAA,uBACI,QAAC,IAAD;QAAM,IAAI,EAAC;MAAX;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAhBR,EAsBK,CAACA,OAAD,iBACG;MAAK,GAAG,EAAC,EAAT;MACI,YAAUF,GADd;MAEI,GAAG,EAAEM,MAFT;MAGI,MAAM,EAAE,MAAMD,YAAY,CAAC,KAAD,CAH9B;MAII,OAAO,EAAE,MAAMF,UAAU,CAAC,IAAD;IAJ7B;MAAA;MAAA;MAAA;IAAA,QAvBR;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAiCH,CAtED;;GAAMJ,K;;KAAAA,K;AAwEN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}