{"ast":null,"code":"// 对 axios二次封装\nimport axios from \"axios\";\nconst requests = axios.create({\n  // 配置对象\n  // 基础路劲，发请求的时候，路径当中会出现api，不红你手写\n  baseURL: '/v1_0',\n  // 请求超时\n  timeout: 5000\n}); // 请求拦截器：在发送请求前，请求拦截器可以检测到，可以在请求发出去前做一些事情\n\nrequests.interceptors.request.use(config => {\n  // config是一个配置对象，对象里面有一个属性很重要，headers请求头\n  return config;\n}, err => {\n  return Promise.reject(err);\n});\nrequests.interceptors.response.use(res => {\n  // 成功的回调函数，服务器响应数据回来以后，响应拦截器可以检测到，可以做一些事情，\n  return res.data;\n}, err => {\n  return Promise.reject(err);\n});\nexport default requests;","map":{"version":3,"names":["axios","requests","create","baseURL","timeout","interceptors","request","use","config","err","Promise","reject","response","res","data"],"sources":["/Users/tonystark/code/VSCodeProject/react/未命名文件夹/gk-h5/src/utils/request.js"],"sourcesContent":["// 对 axios二次封装\nimport axios from \"axios\";\n\nconst requests = axios.create({\n    // 配置对象\n    // 基础路劲，发请求的时候，路径当中会出现api，不红你手写\n    baseURL:'/v1_0',\n    // 请求超时\n    timeout:5000\n});\n// 请求拦截器：在发送请求前，请求拦截器可以检测到，可以在请求发出去前做一些事情\nrequests.interceptors.request.use(config=>{\n    // config是一个配置对象，对象里面有一个属性很重要，headers请求头\n    return config;\n},err=>{\n    return Promise.reject(err);\n});\n\nrequests.interceptors.response.use(res=>{\n    // 成功的回调函数，服务器响应数据回来以后，响应拦截器可以检测到，可以做一些事情，\n    return res.data;\n},err=>{\n    return Promise.reject(err);\n});\n\nexport default requests;\n\n"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;EAC1B;EACA;EACAC,OAAO,EAAC,OAHkB;EAI1B;EACAC,OAAO,EAAC;AALkB,CAAb,CAAjB,C,CAOA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkCC,MAAM,IAAE;EACtC;EACA,OAAOA,MAAP;AACH,CAHD,EAGEC,GAAG,IAAE;EACH,OAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH,CALD;AAOAR,QAAQ,CAACI,YAAT,CAAsBO,QAAtB,CAA+BL,GAA/B,CAAmCM,GAAG,IAAE;EACpC;EACA,OAAOA,GAAG,CAACC,IAAX;AACH,CAHD,EAGEL,GAAG,IAAE;EACH,OAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH,CALD;AAOA,eAAeR,QAAf"},"metadata":{},"sourceType":"module"}