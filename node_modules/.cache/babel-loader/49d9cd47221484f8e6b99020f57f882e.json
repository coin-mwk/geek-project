{"ast":null,"code":"// 找到树的深度\nexport function getTreeDeep(treeData) {\n  let childrenName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'children';\n\n  const walker = tree => {\n    let deep = 0;\n    tree.forEach(item => {\n      if (item[childrenName]) {\n        deep = Math.max(deep, walker(item[childrenName]) + 1);\n      } else {\n        deep = Math.max(deep, 1);\n      }\n    });\n    return deep;\n  };\n\n  return walker(treeData);\n}","map":{"version":3,"names":["getTreeDeep","treeData","childrenName","walker","tree","deep","forEach","item","Math","max"],"sources":["/Users/tonystark/code/VSCodeProject/react/未命名文件夹/gk-h5/node_modules/antd-mobile/es/utils/tree.js"],"sourcesContent":["// 找到树的深度\nexport function getTreeDeep(treeData, childrenName = 'children') {\n  const walker = tree => {\n    let deep = 0;\n    tree.forEach(item => {\n      if (item[childrenName]) {\n        deep = Math.max(deep, walker(item[childrenName]) + 1);\n      } else {\n        deep = Math.max(deep, 1);\n      }\n    });\n    return deep;\n  };\n\n  return walker(treeData);\n}"],"mappings":"AAAA;AACA,OAAO,SAASA,WAAT,CAAqBC,QAArB,EAA0D;EAAA,IAA3BC,YAA2B,uEAAZ,UAAY;;EAC/D,MAAMC,MAAM,GAAGC,IAAI,IAAI;IACrB,IAAIC,IAAI,GAAG,CAAX;IACAD,IAAI,CAACE,OAAL,CAAaC,IAAI,IAAI;MACnB,IAAIA,IAAI,CAACL,YAAD,CAAR,EAAwB;QACtBG,IAAI,GAAGG,IAAI,CAACC,GAAL,CAASJ,IAAT,EAAeF,MAAM,CAACI,IAAI,CAACL,YAAD,CAAL,CAAN,GAA6B,CAA5C,CAAP;MACD,CAFD,MAEO;QACLG,IAAI,GAAGG,IAAI,CAACC,GAAL,CAASJ,IAAT,EAAe,CAAf,CAAP;MACD;IACF,CAND;IAOA,OAAOA,IAAP;EACD,CAVD;;EAYA,OAAOF,MAAM,CAACF,QAAD,CAAb;AACD"},"metadata":{},"sourceType":"module"}