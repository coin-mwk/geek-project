{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from 'fbjs/lib/isEmpty';\nimport warning from 'warning';\n\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n} // type differType = (data1, data2) => bool;\n//\n// type ParamType = {\n//   rowHasChanged: differType;\n//   getRowData: ?typeof defaultGetRowData;\n//   sectionHeaderHasChanged: ?differType;\n//   getSectionHeaderData: ?typeof defaultGetSectionHeaderData;\n// }\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListViewDataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\n\n\nvar ListViewDataSource = function () {\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  function ListViewDataSource(params) {\n    _classCallCheck(this, ListViewDataSource);\n\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0; // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n\n\n  _createClass(ListViewDataSource, [{\n    key: 'cloneWithRows',\n    value: function cloneWithRows(dataBlob, rowIdentities) {\n      var rowIds = rowIdentities ? [rowIdentities] : null;\n\n      if (!this._sectionHeaderHasChanged) {\n        this._sectionHeaderHasChanged = function () {\n          return false;\n        };\n      }\n\n      return this.cloneWithRowsAndSections({\n        s1: dataBlob\n      }, ['s1'], rowIds);\n    }\n    /**\n     * This performs the same function as the `cloneWithRows` function but here\n     * you also specify what your `sectionIdentities` are. If you don't care\n     * about sections you should safely be able to use `cloneWithRows`.\n     *\n     * `sectionIdentities` is an array of identifiers for  sections.\n     * ie. ['s1', 's2', ...].  If not provided, it's assumed that the\n     * keys of dataBlob are the section identities.\n     *\n     * Note: this returns a new object!\n     */\n\n  }, {\n    key: 'cloneWithRowsAndSections',\n    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n      invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n      invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n      var newSource = new ListViewDataSource({\n        getRowData: this._getRowData,\n        getSectionHeaderData: this._getSectionHeaderData,\n        rowHasChanged: this._rowHasChanged,\n        sectionHeaderHasChanged: this._sectionHeaderHasChanged\n      });\n      newSource._dataBlob = dataBlob;\n\n      if (sectionIdentities) {\n        newSource.sectionIdentities = sectionIdentities;\n      } else {\n        newSource.sectionIdentities = Object.keys(dataBlob);\n      }\n\n      if (rowIdentities) {\n        newSource.rowIdentities = rowIdentities;\n      } else {\n        newSource.rowIdentities = [];\n        newSource.sectionIdentities.forEach(function (sectionID) {\n          newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n        });\n      }\n\n      newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n      newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n      return newSource;\n    }\n  }, {\n    key: 'getRowCount',\n    value: function getRowCount() {\n      return this._cachedRowCount;\n    }\n  }, {\n    key: 'getRowAndSectionCount',\n    value: function getRowAndSectionCount() {\n      return this._cachedRowCount + this.sectionIdentities.length;\n    }\n    /**\n     * Returns if the row is dirtied and needs to be rerendered\n     */\n\n  }, {\n    key: 'rowShouldUpdate',\n    value: function rowShouldUpdate(sectionIndex, rowIndex) {\n      var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n      warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n      return needsUpdate;\n    }\n    /**\n     * Gets the data required to render the row.\n     */\n\n  }, {\n    key: 'getRowData',\n    value: function getRowData(sectionIndex, rowIndex) {\n      var sectionID = this.sectionIdentities[sectionIndex];\n      var rowID = this.rowIdentities[sectionIndex][rowIndex];\n      warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n      return this._getRowData(this._dataBlob, sectionID, rowID);\n    }\n    /**\n     * Gets the rowID at index provided if the dataSource arrays were flattened,\n     * or null of out of range indexes.\n     */\n\n  }, {\n    key: 'getRowIDForFlatIndex',\n    value: function getRowIDForFlatIndex(index) {\n      var accessIndex = index;\n\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        if (accessIndex >= this.rowIdentities[ii].length) {\n          accessIndex -= this.rowIdentities[ii].length;\n        } else {\n          return this.rowIdentities[ii][accessIndex];\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Gets the sectionID at index provided if the dataSource arrays were flattened,\n     * or null for out of range indexes.\n     */\n\n  }, {\n    key: 'getSectionIDForFlatIndex',\n    value: function getSectionIDForFlatIndex(index) {\n      var accessIndex = index;\n\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        if (accessIndex >= this.rowIdentities[ii].length) {\n          accessIndex -= this.rowIdentities[ii].length;\n        } else {\n          return this.sectionIdentities[ii];\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Returns an array containing the number of rows in each section\n     */\n\n  }, {\n    key: 'getSectionLengths',\n    value: function getSectionLengths() {\n      var results = [];\n\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        results.push(this.rowIdentities[ii].length);\n      }\n\n      return results;\n    }\n    /**\n     * Returns if the section header is dirtied and needs to be rerendered\n     */\n\n  }, {\n    key: 'sectionHeaderShouldUpdate',\n    value: function sectionHeaderShouldUpdate(sectionIndex) {\n      var needsUpdate = this._dirtySections[sectionIndex];\n      warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n      return needsUpdate;\n    }\n    /**\n     * Gets the data required to render the section header\n     */\n\n  }, {\n    key: 'getSectionHeaderData',\n    value: function getSectionHeaderData(sectionIndex) {\n      if (!this._getSectionHeaderData) {\n        return null;\n      }\n\n      var sectionID = this.sectionIdentities[sectionIndex];\n      warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n      return this._getSectionHeaderData(this._dataBlob, sectionID);\n    }\n    /**\n     * Private members and methods.\n     */\n    // These two 'protected' variables are accessed by ListView to iterate over\n    // the data in this class.\n\n  }, {\n    key: '_calculateDirtyArrays',\n    value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n      // construct a hashmap of the existing (old) id arrays\n      var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n      var prevRowsHash = {};\n\n      for (var ii = 0; ii < prevRowIDs.length; ii++) {\n        var sectionID = prevSectionIDs[ii];\n        warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n        prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n      } // compare the 2 identity array and get the dirtied rows\n\n\n      this._dirtySections = [];\n      this._dirtyRows = [];\n      var dirty;\n\n      for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n        var sectionID = this.sectionIdentities[sIndex]; // dirty if the sectionHeader is new or _sectionHasChanged is true\n\n        dirty = !prevSectionsHash[sectionID];\n        var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n\n        if (!dirty && sectionHeaderHasChanged) {\n          dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n        }\n\n        this._dirtySections.push(!!dirty);\n\n        this._dirtyRows[sIndex] = [];\n\n        for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n          var rowID = this.rowIdentities[sIndex][rIndex]; // dirty if the section is new, row is new or _rowHasChanged is true\n\n          dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n\n          this._dirtyRows[sIndex].push(!!dirty);\n        }\n      }\n    }\n  }]);\n\n  return ListViewDataSource;\n}();\n\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n\n  var result = {};\n\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n\n  return result;\n} // module.exports = ListViewDataSource;\n\n\nexport default ListViewDataSource;","map":{"version":3,"names":["_classCallCheck","_createClass","invariant","isEmpty","warning","defaultGetRowData","dataBlob","sectionID","rowID","defaultGetSectionHeaderData","ListViewDataSource","params","rowHasChanged","_rowHasChanged","_getRowData","getRowData","_sectionHeaderHasChanged","sectionHeaderHasChanged","_getSectionHeaderData","getSectionHeaderData","_dataBlob","_dirtyRows","_dirtySections","_cachedRowCount","rowIdentities","sectionIdentities","key","value","cloneWithRows","rowIds","cloneWithRowsAndSections","s1","length","newSource","Object","keys","forEach","push","countRows","_calculateDirtyArrays","getRowCount","getRowAndSectionCount","rowShouldUpdate","sectionIndex","rowIndex","needsUpdate","undefined","getRowIDForFlatIndex","index","accessIndex","ii","getSectionIDForFlatIndex","getSectionLengths","results","sectionHeaderShouldUpdate","prevDataBlob","prevSectionIDs","prevRowIDs","prevSectionsHash","keyedDictionaryFromArray","prevRowsHash","dirty","sIndex","rIndex","allRowIDs","totalRows","sectionIdx","rowIDs","arr","result"],"sources":["/Users/tonystark/code/VSCodeProject/react/gk-h5/node_modules/rmc-list-view/es/ListViewDataSource.js"],"sourcesContent":["import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from 'fbjs/lib/isEmpty';\nimport warning from 'warning';\n\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n}\n\n// type differType = (data1, data2) => bool;\n//\n// type ParamType = {\n//   rowHasChanged: differType;\n//   getRowData: ?typeof defaultGetRowData;\n//   sectionHeaderHasChanged: ?differType;\n//   getSectionHeaderData: ?typeof defaultGetSectionHeaderData;\n// }\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListViewDataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\n\nvar ListViewDataSource = function () {\n\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  function ListViewDataSource(params) {\n    _classCallCheck(this, ListViewDataSource);\n\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0;\n\n    // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n\n\n  _createClass(ListViewDataSource, [{\n    key: 'cloneWithRows',\n    value: function cloneWithRows(dataBlob, rowIdentities) {\n      var rowIds = rowIdentities ? [rowIdentities] : null;\n      if (!this._sectionHeaderHasChanged) {\n        this._sectionHeaderHasChanged = function () {\n          return false;\n        };\n      }\n      return this.cloneWithRowsAndSections({ s1: dataBlob }, ['s1'], rowIds);\n    }\n\n    /**\n     * This performs the same function as the `cloneWithRows` function but here\n     * you also specify what your `sectionIdentities` are. If you don't care\n     * about sections you should safely be able to use `cloneWithRows`.\n     *\n     * `sectionIdentities` is an array of identifiers for  sections.\n     * ie. ['s1', 's2', ...].  If not provided, it's assumed that the\n     * keys of dataBlob are the section identities.\n     *\n     * Note: this returns a new object!\n     */\n\n  }, {\n    key: 'cloneWithRowsAndSections',\n    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n      invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n      invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n\n      var newSource = new ListViewDataSource({\n        getRowData: this._getRowData,\n        getSectionHeaderData: this._getSectionHeaderData,\n        rowHasChanged: this._rowHasChanged,\n        sectionHeaderHasChanged: this._sectionHeaderHasChanged\n      });\n      newSource._dataBlob = dataBlob;\n      if (sectionIdentities) {\n        newSource.sectionIdentities = sectionIdentities;\n      } else {\n        newSource.sectionIdentities = Object.keys(dataBlob);\n      }\n      if (rowIdentities) {\n        newSource.rowIdentities = rowIdentities;\n      } else {\n        newSource.rowIdentities = [];\n        newSource.sectionIdentities.forEach(function (sectionID) {\n          newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n        });\n      }\n      newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n      newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n      return newSource;\n    }\n  }, {\n    key: 'getRowCount',\n    value: function getRowCount() {\n      return this._cachedRowCount;\n    }\n  }, {\n    key: 'getRowAndSectionCount',\n    value: function getRowAndSectionCount() {\n      return this._cachedRowCount + this.sectionIdentities.length;\n    }\n\n    /**\n     * Returns if the row is dirtied and needs to be rerendered\n     */\n\n  }, {\n    key: 'rowShouldUpdate',\n    value: function rowShouldUpdate(sectionIndex, rowIndex) {\n      var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n      warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n      return needsUpdate;\n    }\n\n    /**\n     * Gets the data required to render the row.\n     */\n\n  }, {\n    key: 'getRowData',\n    value: function getRowData(sectionIndex, rowIndex) {\n      var sectionID = this.sectionIdentities[sectionIndex];\n      var rowID = this.rowIdentities[sectionIndex][rowIndex];\n      warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n      return this._getRowData(this._dataBlob, sectionID, rowID);\n    }\n\n    /**\n     * Gets the rowID at index provided if the dataSource arrays were flattened,\n     * or null of out of range indexes.\n     */\n\n  }, {\n    key: 'getRowIDForFlatIndex',\n    value: function getRowIDForFlatIndex(index) {\n      var accessIndex = index;\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        if (accessIndex >= this.rowIdentities[ii].length) {\n          accessIndex -= this.rowIdentities[ii].length;\n        } else {\n          return this.rowIdentities[ii][accessIndex];\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Gets the sectionID at index provided if the dataSource arrays were flattened,\n     * or null for out of range indexes.\n     */\n\n  }, {\n    key: 'getSectionIDForFlatIndex',\n    value: function getSectionIDForFlatIndex(index) {\n      var accessIndex = index;\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        if (accessIndex >= this.rowIdentities[ii].length) {\n          accessIndex -= this.rowIdentities[ii].length;\n        } else {\n          return this.sectionIdentities[ii];\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Returns an array containing the number of rows in each section\n     */\n\n  }, {\n    key: 'getSectionLengths',\n    value: function getSectionLengths() {\n      var results = [];\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        results.push(this.rowIdentities[ii].length);\n      }\n      return results;\n    }\n\n    /**\n     * Returns if the section header is dirtied and needs to be rerendered\n     */\n\n  }, {\n    key: 'sectionHeaderShouldUpdate',\n    value: function sectionHeaderShouldUpdate(sectionIndex) {\n      var needsUpdate = this._dirtySections[sectionIndex];\n      warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n      return needsUpdate;\n    }\n\n    /**\n     * Gets the data required to render the section header\n     */\n\n  }, {\n    key: 'getSectionHeaderData',\n    value: function getSectionHeaderData(sectionIndex) {\n      if (!this._getSectionHeaderData) {\n        return null;\n      }\n      var sectionID = this.sectionIdentities[sectionIndex];\n      warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n      return this._getSectionHeaderData(this._dataBlob, sectionID);\n    }\n\n    /**\n     * Private members and methods.\n     */\n\n    // These two 'protected' variables are accessed by ListView to iterate over\n    // the data in this class.\n\n  }, {\n    key: '_calculateDirtyArrays',\n    value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n      // construct a hashmap of the existing (old) id arrays\n      var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n      var prevRowsHash = {};\n      for (var ii = 0; ii < prevRowIDs.length; ii++) {\n        var sectionID = prevSectionIDs[ii];\n        warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n        prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n      }\n\n      // compare the 2 identity array and get the dirtied rows\n      this._dirtySections = [];\n      this._dirtyRows = [];\n\n      var dirty;\n      for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n        var sectionID = this.sectionIdentities[sIndex];\n        // dirty if the sectionHeader is new or _sectionHasChanged is true\n        dirty = !prevSectionsHash[sectionID];\n        var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n        if (!dirty && sectionHeaderHasChanged) {\n          dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n        }\n        this._dirtySections.push(!!dirty);\n\n        this._dirtyRows[sIndex] = [];\n        for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n          var rowID = this.rowIdentities[sIndex][rIndex];\n          // dirty if the section is new, row is new or _rowHasChanged is true\n          dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n          this._dirtyRows[sIndex].push(!!dirty);\n        }\n      }\n    }\n  }]);\n\n  return ListViewDataSource;\n}();\n\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n  var result = {};\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n  return result;\n}\n\n// module.exports = ListViewDataSource;\nexport default ListViewDataSource;"],"mappings":"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"},"metadata":{},"sourceType":"module"}