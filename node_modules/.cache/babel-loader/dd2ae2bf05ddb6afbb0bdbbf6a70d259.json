{"ast":null,"code":"import request from \"@/utils/request\";\nimport { setLocalChannels, getLocalChannels } from \"@/utils/storage\";\nimport { hasToken } from \"@/utils/storage\";\n/**\n * 将用户频道保存到 Redux\n * @param {Array} channels\n * @returns\n */\n\nexport const saveUserChannels = channels => {\n  return {\n    type: 'home/channel',\n    payload: channels\n  };\n};\n/**\n * 获取用户频道\n * @returns thunk\n */\n\nexport const getUserChannels = () => {\n  return async dispatch => {\n    // 1. 判断用户是否登录\n    if (hasToken()) {\n      const res = await request.get('/user/channels');\n      dispatch(saveUserChannels(res.data.channels));\n    } else {\n      // 2. 没有token,从本地获取频道数据\n      const channels = getLocalChannels();\n\n      if (channels) {\n        // 没有token，但本地有channels数据\n        dispatch(saveUserChannels(channels));\n      } else {\n        // 没有token, 且本地没有channels数据\n        const res = await request.get('/user/channels');\n        dispatch(saveUserChannels(res.data.channels)); // 保存到本地\n\n        setLocalChannels(res.data.channels);\n      }\n    }\n  };\n};\n/**\n * 获取所有的频道\n */\n\nexport const getAllChannels = () => {\n  return async dispatch => {\n    // 请求数据\n    const res = await request.get('/channels');\n    const {\n      channels\n    } = res.data; // 将所有频道数据保存到 Redux\n\n    dispatch(setAllChannels(channels));\n  };\n};\n/**\n * 保存所有的频道\n * @param {*} channels\n * @returns\n */\n\nexport const setAllChannels = channels => {\n  return {\n    type: 'home/allChannel',\n    payload: channels\n  };\n}; // 添加频道\n\nexport const addChannel = channel => {\n  return async (dispatch, getState) => {\n    // 获取到所有的userChannels\n    const {\n      userChannels\n    } = getState().home; // 如果登录了，发送请求获取频道信息\n\n    if (hasToken()) {\n      await request.patch('/user/channels', {\n        channels: [channel]\n      });\n    } else {\n      // 如果没有登录，将频道数据保存到本地\n      // 将channels数据保存本地\n      setLocalChannels([...userChannels, channel]);\n    }\n\n    dispatch(saveUserChannels([...userChannels, channel]));\n  };\n}; // 删除频道\n\nexport const delChannel = channel => {\n  return async (dispatch, getState) => {\n    // 获取到所有的userChannels\n    const {\n      userChannels\n    } = getState().home; // 如果登录了，发送请求获取频道信息\n\n    if (hasToken()) {\n      await request.delete(`/user/channels/${channel.id}`);\n    } else {\n      // 如果没有登录，将频道数据保存到本地\n      // 将channels数据保存本地\n      setLocalChannels(userChannels.filter(item => item.id !== channel.id));\n    }\n\n    dispatch(saveUserChannels(userChannels.filter(item => item.id !== channel.id)));\n  };\n}; // 获取文章列表数据\n\nexport const getArticleList = (channelId, timestamp) => {\n  return async dispatch => {\n    const res = await request.get('/articles', {\n      params: {\n        channel_id: channelId,\n        timestamp: timestamp\n      }\n    }); // 将数据保存到redux中\n\n    dispatch(setArticleList({\n      channelId,\n      timestamp: res.data.pre_timestamp,\n      list: res.data.results\n    }));\n  };\n};\nexport const setArticleList = payload => {\n  return {\n    type: 'home/setArticleList',\n    payload\n  };\n}; // 获取文章列表数据  下拉刷新，获取更多文章列表数据\n\nexport const getMoreArticleList = (channelId, timestamp) => {\n  return async dispatch => {\n    const res = await request.get('/articles', {\n      params: {\n        channel_id: channelId,\n        timestamp: timestamp\n      }\n    });\n    dispatch(setMoreArticleList({\n      channelId,\n      timestamp: res.data.pre_timestamp,\n      list: res.data.results\n    }));\n  };\n};\nexport const setMoreArticleList = payload => {\n  return {\n    type: 'home/saveMoreArticleList',\n    payload\n  };\n};\n/**\n * 设置举报反馈菜单信息\n */\n\nexport const setFeedbackAction = _ref => {\n  let {\n    visible,\n    articleId\n  } = _ref;\n  return {\n    type: 'home/feedback_action',\n    payload: {\n      visible,\n      articleId\n    }\n  };\n}; // 点击不喜欢文章时的请求处理\n\nexport const unLikeArticle = articleId => {\n  return async (dispatch, getState) => {\n    await request({\n      method: 'post',\n      url: '/article/dislikes',\n      data: {\n        target: articleId\n      }\n    }); // 把当前频道对应的文章删除\n\n    const channelId = getState().home.feedbackAction.channelId;\n    const articles = getState().home.articles[channelId];\n    console.log(channel);\n    dispatch(setArticleList(articles.filter(item => item.art_id !== articleId)));\n  };\n};","map":{"version":3,"names":["request","setLocalChannels","getLocalChannels","hasToken","saveUserChannels","channels","type","payload","getUserChannels","dispatch","res","get","data","getAllChannels","setAllChannels","addChannel","channel","getState","userChannels","home","patch","delChannel","delete","id","filter","item","getArticleList","channelId","timestamp","params","channel_id","setArticleList","pre_timestamp","list","results","getMoreArticleList","setMoreArticleList","setFeedbackAction","visible","articleId","unLikeArticle","method","url","target","feedbackAction","articles","console","log","art_id"],"sources":["/Users/tonystark/code/VSCodeProject/react/gk-h5/src/store/actions/home.js"],"sourcesContent":["\nimport request from \"@/utils/request\";\nimport { setLocalChannels, getLocalChannels  } from \"@/utils/storage\";\nimport { hasToken } from \"@/utils/storage\";\n\n/**\n * 将用户频道保存到 Redux\n * @param {Array} channels\n * @returns\n */\nexport const saveUserChannels = (channels) => {\n  return {\n    type: 'home/channel',\n    payload: channels,\n  }\n}\n\n/**\n * 获取用户频道\n * @returns thunk\n */\nexport const getUserChannels = () => {\n  return async (dispatch) => {\n    // 1. 判断用户是否登录\n    if (hasToken()) {\n      const res = await request.get('/user/channels')\n      dispatch(saveUserChannels(res.data.channels))\n    } else {\n      // 2. 没有token,从本地获取频道数据\n      const channels = getLocalChannels()\n      if (channels) {\n        // 没有token，但本地有channels数据\n        dispatch(saveUserChannels(channels))\n      } else {\n        // 没有token, 且本地没有channels数据\n        const res = await request.get('/user/channels')\n        dispatch(saveUserChannels(res.data.channels))\n        // 保存到本地\n        setLocalChannels(res.data.channels)\n      }\n    }\n  }\n}\n\n\n/**\n * 获取所有的频道\n */\n export const getAllChannels = () => {\n  return async (dispatch) => {\n    // 请求数据\n    const res = await request.get('/channels')\n    const { channels } = res.data\n\n    // 将所有频道数据保存到 Redux\n    dispatch(setAllChannels(channels))\n  }\n}\n\n/**\n * 保存所有的频道\n * @param {*} channels\n * @returns\n */\nexport const setAllChannels = (channels) => {\n  return {\n    type: 'home/allChannel',\n    payload: channels,\n  }\n}\n\n// 添加频道\nexport const addChannel = (channel) => {\n  return async (dispatch, getState) => {\n    // 获取到所有的userChannels\n    const { userChannels } = getState().home\n    // 如果登录了，发送请求获取频道信息\n    if (hasToken()) {\n      await request.patch('/user/channels', {\n        channels: [channel],\n      })\n    } else {\n      // 如果没有登录，将频道数据保存到本地\n      // 将channels数据保存本地\n      setLocalChannels([...userChannels, channel])\n    }\n    dispatch(saveUserChannels([...userChannels, channel]))\n  }\n}\n\n// 删除频道\nexport const delChannel = (channel) => {\n  return async (dispatch, getState) => {\n    // 获取到所有的userChannels\n    const { userChannels } = getState().home\n    // 如果登录了，发送请求获取频道信息\n    if (hasToken()) {\n      await request.delete(`/user/channels/${channel.id}`)\n    } else {\n      // 如果没有登录，将频道数据保存到本地\n      // 将channels数据保存本地\n      setLocalChannels(userChannels.filter((item) => item.id !== channel.id))\n    }\n    dispatch(\n      saveUserChannels(userChannels.filter((item) => item.id !== channel.id))\n    )\n  }\n}\n\n\n// 获取文章列表数据\nexport const getArticleList = (channelId, timestamp) => {\n  return async (dispatch) => {\n    const res = await request.get('/articles', {\n      params: {\n        channel_id: channelId,\n        timestamp: timestamp,\n      },\n    })\n    // 将数据保存到redux中\n    dispatch(\n      setArticleList({\n        channelId,\n        timestamp: res.data.pre_timestamp,\n        list: res.data.results,\n      })\n    )\n  }\n}\n\nexport const setArticleList = (payload) => {\n  return {\n    type: 'home/setArticleList',\n    payload,\n  }\n}\n\n// 获取文章列表数据  下拉刷新，获取更多文章列表数据\nexport const getMoreArticleList = (channelId, timestamp) => {\n  return async (dispatch) => {\n    const res = await request.get('/articles', {\n      params: {\n        channel_id: channelId,\n        timestamp: timestamp,\n      },\n    })\n\n    dispatch(\n      setMoreArticleList({\n        channelId,\n        timestamp: res.data.pre_timestamp,\n        list: res.data.results,\n      })\n    )\n  }\n}\n\nexport const setMoreArticleList = payload => {\n  return {\n    type: 'home/saveMoreArticleList',\n    payload\n  }\n}\n\n/**\n * 设置举报反馈菜单信息\n */\n export const setFeedbackAction = ({ visible, articleId }) => ({\n  type: 'home/feedback_action',\n  payload: {\n    visible,\n    articleId,\n  },\n})\n\n\n// 点击不喜欢文章时的请求处理\nexport const unLikeArticle = (articleId)=>{\n  return async (dispatch,getState)=>{\n    await request({\n      method:'post',\n      url:'/article/dislikes',\n      data:{\n        target:articleId\n      }\n    })\n    // 把当前频道对应的文章删除\n    const channelId = getState().home.feedbackAction.channelId;\n    const articles = getState().home.articles[channelId];\n    console.log(channel)\n    dispatch(setArticleList(articles.filter(item=> item.art_id !== articleId)))\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}