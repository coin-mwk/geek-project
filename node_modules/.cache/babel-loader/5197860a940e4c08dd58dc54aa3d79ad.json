{"ast":null,"code":"// 对 axios二次封装\nimport { Toast } from \"antd-mobile\";\nimport axios from \"axios\";\nimport { getTokenInfo, hasToken } from \"./storage\";\nimport history from \"./history\";\nimport store from \"@/store\";\nimport { logout, saveToken } from \"@/store/actions/login\";\nimport { setTokenInfo, removeTokenInfo } from \"./storage\";\nconst baseURL = 'http://geek.itheima.net/v1_0';\nconst requests = axios.create({\n  // 配置对象\n  // 基础路劲，发请求的时候，路径当中会出现api，不红你手写\n  baseURL,\n  // 请求超时\n  timeout: 5000\n}); // 请求拦截器：在发送请求前，请求拦截器可以检测到，可以在请求发出去前做一些事情\n\nrequests.interceptors.request.use(config => {\n  // config是一个配置对象，对象里面有一个属性很重要，headers请求头\n  if (hasToken) {\n    const token = getTokenInfo().token;\n    config.headers.Authorization = 'Bearer ' + token;\n    config.headers[\"X-AMINER-PRODUCT\"] = 'reco', config.headers['Content-Type'] = 'application/json';\n  }\n\n  return config;\n}, err => {\n  return Promise.reject(err);\n});\nrequests.interceptors.response.use(res => {\n  // 成功的回调函数，服务器响应数据回来以后，响应拦截器可以检测到，可以做一些事情，\n  return res.data;\n}, async err => {\n  // 如果因为网络原因 response没有，给提示消息\n  if (!err.response) {\n    Toast.show({\n      content: '网络繁忙，请稍后再试!'\n    });\n    return Promise.reject(err);\n  } // 不是token失效的原因\n\n\n  if (err.response.status !== 401) {\n    Toast.show({\n      content: err.response.data.message\n    });\n    return Promise.reject(err);\n  } // 网络没问题 ， 且是401，token失效\n  // 判断有没有刷新token\n\n\n  const {\n    token,\n    refresh_token\n  } = getTokenInfo();\n\n  if (!refresh_token) {\n    // 没token，跳转至登录页\n    history.replace('/login', {\n      from: history.location.pathname || '/home'\n    });\n    Toast.show({\n      content: 'token失效!'\n    });\n    return Promise.reject(err);\n  } // 是401错误，且有刷新token，刷新token\n\n\n  try {\n    // 通过 Refresh Token 换取新 Token\n    // 特别说明：这个地方发请求的时候，不能使用新建的 http 实例去请求，要用默认实例 axios 去请求！\n    // 否则会因 http 实例的请求拦截器的作用，携带上老的 token 而不是 refresh_token\n    const res = await axios({\n      method: 'put',\n      url: baseURL + '/authorizations',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Bearer ' + refresh_token\n      }\n    }); // 将新换到的 Token 信息保存到 Redux 和 LocalStorage 中\n\n    const tokenInfo = {\n      token: res.data.data.token,\n      refresh_token\n    };\n    setTokenInfo(tokenInfo);\n    store.dispatch(saveToken(tokenInfo)); // 重新发送之前因 Token 无效而失败的请求\n\n    return requests(err.config);\n  } catch (error) {\n    console.log(\"sasfsadfa\"); // ... 这里后续编写 Token 换取失败的逻辑 ...\n    // 清除 Redux 和 LocalStorage 中 Token 信息\n\n    removeTokenInfo();\n    store.dispatch(logout); // 跳转到登录页，并携带上当前正在访问的页面，等登录成功后再跳回该页面\n\n    history.push('/login', {\n      from: history.location.pathname || '/home'\n    });\n    return Promise.reject(error);\n  }\n\n  return Promise.reject(err);\n});\nexport default requests;","map":{"version":3,"names":["Toast","axios","getTokenInfo","hasToken","history","store","logout","saveToken","setTokenInfo","removeTokenInfo","baseURL","requests","create","timeout","interceptors","request","use","config","token","headers","Authorization","err","Promise","reject","response","res","data","show","content","status","message","refresh_token","replace","from","location","pathname","method","url","tokenInfo","dispatch","error","console","log","push"],"sources":["/Users/tonystark/code/VSCodeProject/react/gk-h5/src/utils/request.js"],"sourcesContent":["// 对 axios二次封装\nimport { Toast } from \"antd-mobile\";\nimport axios from \"axios\";\nimport { getTokenInfo, hasToken } from \"./storage\";\nimport history from \"./history\";\nimport store from \"@/store\";\nimport { logout, saveToken } from \"@/store/actions/login\";\nimport { setTokenInfo,removeTokenInfo } from \"./storage\";\n\nconst baseURL = 'http://geek.itheima.net/v1_0'\nconst requests = axios.create({\n    // 配置对象\n    // 基础路劲，发请求的时候，路径当中会出现api，不红你手写\n    baseURL,\n    // 请求超时\n    timeout: 5000\n});\n// 请求拦截器：在发送请求前，请求拦截器可以检测到，可以在请求发出去前做一些事情\nrequests.interceptors.request.use(config => {\n    // config是一个配置对象，对象里面有一个属性很重要，headers请求头\n    if (hasToken) {\n        const token = getTokenInfo().token;\n        config.headers.Authorization = 'Bearer ' + token;\n        config.headers[\"X-AMINER-PRODUCT\"] = 'reco',\n        config.headers[ 'Content-Type'] = 'application/json'\n    }\n    return config;\n}, err => {\n    return Promise.reject(err);\n});\n\nrequests.interceptors.response.use(res => {\n    // 成功的回调函数，服务器响应数据回来以后，响应拦截器可以检测到，可以做一些事情，\n    return res.data;\n}, async err => {\n    // 如果因为网络原因 response没有，给提示消息\n    if (!err.response) {\n        Toast.show({\n            content: '网络繁忙，请稍后再试!',\n        });\n        return Promise.reject(err);\n    }\n    // 不是token失效的原因\n    if (err.response.status !== 401) {\n        Toast.show({\n            content: err.response.data.message,\n        })\n        return Promise.reject(err);\n    }\n    // 网络没问题 ， 且是401，token失效\n    // 判断有没有刷新token\n    const { token, refresh_token } = getTokenInfo();\n    if (!refresh_token) {\n        // 没token，跳转至登录页\n        history.replace('/login', {\n            from: history.location.pathname || '/home'\n        })\n        Toast.show({\n            content: 'token失效!',\n        });\n        return Promise.reject(err);\n    }\n    // 是401错误，且有刷新token，刷新token\n    try {\n        // 通过 Refresh Token 换取新 Token\n        // 特别说明：这个地方发请求的时候，不能使用新建的 http 实例去请求，要用默认实例 axios 去请求！\n        // 否则会因 http 实例的请求拦截器的作用，携带上老的 token 而不是 refresh_token\n        const res = await axios({\n            method:'put',\n            url:baseURL + '/authorizations',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Bearer ' + refresh_token\n            }\n        });\n\n        // 将新换到的 Token 信息保存到 Redux 和 LocalStorage 中\n        const tokenInfo = {\n            token: res.data.data.token,\n            refresh_token,\n        }\n        setTokenInfo(tokenInfo)\n        store.dispatch(saveToken(tokenInfo))\n\n        // 重新发送之前因 Token 无效而失败的请求\n        return requests(err.config)\n    } catch (error) {\n        console.log(\"sasfsadfa\")\n        // ... 这里后续编写 Token 换取失败的逻辑 ...\n        // 清除 Redux 和 LocalStorage 中 Token 信息\n        removeTokenInfo()\n        store.dispatch(logout)\n\n        // 跳转到登录页，并携带上当前正在访问的页面，等登录成功后再跳回该页面\n        history.push('/login', {\n            from: history.location.pathname || '/home'\n        })\n        \n        return Promise.reject(error)\n    }\n\n    return Promise.reject(err);\n});\nexport default requests;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}