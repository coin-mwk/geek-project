{"ast":null,"code":"/* tslint:disable:no-bitwise */\nimport { SWIPE, DIRECTION_NONE, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN } from './config';\n\nfunction _calcTriangleDistance(x, y) {\n  return Math.sqrt(x * x + y * y);\n}\n\nfunction _calcAngle(x, y) {\n  var radian = Math.atan2(y, x);\n  return 180 / (Math.PI / radian);\n}\n\nexport function now() {\n  return Date.now();\n}\nexport function calcMutliFingerStatus(touches) {\n  if (touches.length < 2) {\n    return;\n  }\n\n  var _touches$ = touches[0],\n      x1 = _touches$.x,\n      y1 = _touches$.y;\n  var _touches$2 = touches[1],\n      x2 = _touches$2.x,\n      y2 = _touches$2.y;\n  var deltaX = x2 - x1;\n  var deltaY = y2 - y1;\n  return {\n    x: deltaX,\n    y: deltaY,\n    z: _calcTriangleDistance(deltaX, deltaY),\n    angle: _calcAngle(deltaX, deltaY)\n  };\n}\nexport function calcMoveStatus(startTouches, touches, time) {\n  var _startTouches$ = startTouches[0],\n      x1 = _startTouches$.x,\n      y1 = _startTouches$.y;\n  var _touches$3 = touches[0],\n      x2 = _touches$3.x,\n      y2 = _touches$3.y;\n  var deltaX = x2 - x1;\n  var deltaY = y2 - y1;\n\n  var deltaZ = _calcTriangleDistance(deltaX, deltaY);\n\n  return {\n    x: deltaX,\n    y: deltaY,\n    z: deltaZ,\n    time: time,\n    velocity: deltaZ / time,\n    angle: _calcAngle(deltaX, deltaY)\n  };\n}\nexport function calcRotation(startMutliFingerStatus, mutliFingerStatus) {\n  var startAngle = startMutliFingerStatus.angle;\n  var angle = mutliFingerStatus.angle;\n  return angle - startAngle;\n}\nexport function getEventName(prefix, status) {\n  return prefix + status[0].toUpperCase() + status.slice(1);\n}\nexport function shouldTriggerSwipe(delta, velocity) {\n  return Math.abs(delta) >= SWIPE.threshold && Math.abs(velocity) > SWIPE.velocity;\n}\nexport function shouldTriggerDirection(direction, directionSetting) {\n  if (directionSetting & direction) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * @private\n * get the direction between two points\n * Note: will change next version\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\n\nexport function getDirection(x, y) {\n  if (x === y) {\n    return DIRECTION_NONE;\n  }\n\n  if (Math.abs(x) >= Math.abs(y)) {\n    return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n  }\n\n  return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n/**\n * @private\n * get the direction between tow points when touch moving\n * Note: will change next version\n * @param {Object} point1 coordinate point, include x & y attributes\n * @param {Object} point2 coordinate point, include x & y attributes\n * @return {Number} direction\n */\n\nexport function getMovingDirection(point1, point2) {\n  var x1 = point1.x,\n      y1 = point1.y;\n  var x2 = point2.x,\n      y2 = point2.y;\n  var deltaX = x2 - x1;\n  var deltaY = y2 - y1;\n\n  if (deltaX === 0 && deltaY === 0) {\n    return DIRECTION_NONE;\n  }\n\n  if (Math.abs(deltaX) >= Math.abs(deltaY)) {\n    return deltaX < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n  }\n\n  return deltaY < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\nexport function getDirectionEventName(direction) {\n  var name = void 0;\n\n  switch (direction) {\n    case DIRECTION_NONE:\n      break;\n\n    case DIRECTION_LEFT:\n      name = 'left';\n      break;\n\n    case DIRECTION_RIGHT:\n      name = 'right';\n      break;\n\n    case DIRECTION_UP:\n      name = 'up';\n      break;\n\n    case DIRECTION_DOWN:\n      name = 'down';\n      break;\n\n    default:\n  }\n\n  return name;\n}","map":{"version":3,"names":["SWIPE","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","_calcTriangleDistance","x","y","Math","sqrt","_calcAngle","radian","atan2","PI","now","Date","calcMutliFingerStatus","touches","length","_touches$","x1","y1","_touches$2","x2","y2","deltaX","deltaY","z","angle","calcMoveStatus","startTouches","time","_startTouches$","_touches$3","deltaZ","velocity","calcRotation","startMutliFingerStatus","mutliFingerStatus","startAngle","getEventName","prefix","status","toUpperCase","slice","shouldTriggerSwipe","delta","abs","threshold","shouldTriggerDirection","direction","directionSetting","getDirection","getMovingDirection","point1","point2","getDirectionEventName","name"],"sources":["/Users/tonystark/code/VSCodeProject/react/gk-h5/node_modules/rc-gesture/es/util.js"],"sourcesContent":["/* tslint:disable:no-bitwise */\nimport { SWIPE, DIRECTION_NONE, DIRECTION_LEFT, DIRECTION_RIGHT, DIRECTION_UP, DIRECTION_DOWN } from './config';\nfunction _calcTriangleDistance(x, y) {\n    return Math.sqrt(x * x + y * y);\n}\nfunction _calcAngle(x, y) {\n    var radian = Math.atan2(y, x);\n    return 180 / (Math.PI / radian);\n}\nexport function now() {\n    return Date.now();\n}\nexport function calcMutliFingerStatus(touches) {\n    if (touches.length < 2) {\n        return;\n    }\n    var _touches$ = touches[0],\n        x1 = _touches$.x,\n        y1 = _touches$.y;\n    var _touches$2 = touches[1],\n        x2 = _touches$2.x,\n        y2 = _touches$2.y;\n\n    var deltaX = x2 - x1;\n    var deltaY = y2 - y1;\n    return {\n        x: deltaX,\n        y: deltaY,\n        z: _calcTriangleDistance(deltaX, deltaY),\n        angle: _calcAngle(deltaX, deltaY)\n    };\n}\nexport function calcMoveStatus(startTouches, touches, time) {\n    var _startTouches$ = startTouches[0],\n        x1 = _startTouches$.x,\n        y1 = _startTouches$.y;\n    var _touches$3 = touches[0],\n        x2 = _touches$3.x,\n        y2 = _touches$3.y;\n\n    var deltaX = x2 - x1;\n    var deltaY = y2 - y1;\n    var deltaZ = _calcTriangleDistance(deltaX, deltaY);\n    return {\n        x: deltaX,\n        y: deltaY,\n        z: deltaZ,\n        time: time,\n        velocity: deltaZ / time,\n        angle: _calcAngle(deltaX, deltaY)\n    };\n}\nexport function calcRotation(startMutliFingerStatus, mutliFingerStatus) {\n    var startAngle = startMutliFingerStatus.angle;\n    var angle = mutliFingerStatus.angle;\n\n    return angle - startAngle;\n}\nexport function getEventName(prefix, status) {\n    return prefix + status[0].toUpperCase() + status.slice(1);\n}\nexport function shouldTriggerSwipe(delta, velocity) {\n    return Math.abs(delta) >= SWIPE.threshold && Math.abs(velocity) > SWIPE.velocity;\n}\nexport function shouldTriggerDirection(direction, directionSetting) {\n    if (directionSetting & direction) {\n        return true;\n    }\n    return false;\n}\n/**\n * @private\n * get the direction between two points\n * Note: will change next version\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nexport function getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n    if (Math.abs(x) >= Math.abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n/**\n * @private\n * get the direction between tow points when touch moving\n * Note: will change next version\n * @param {Object} point1 coordinate point, include x & y attributes\n * @param {Object} point2 coordinate point, include x & y attributes\n * @return {Number} direction\n */\nexport function getMovingDirection(point1, point2) {\n    var x1 = point1.x,\n        y1 = point1.y;\n    var x2 = point2.x,\n        y2 = point2.y;\n\n    var deltaX = x2 - x1;\n    var deltaY = y2 - y1;\n    if (deltaX === 0 && deltaY === 0) {\n        return DIRECTION_NONE;\n    }\n    if (Math.abs(deltaX) >= Math.abs(deltaY)) {\n        return deltaX < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return deltaY < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\nexport function getDirectionEventName(direction) {\n    var name = void 0;\n    switch (direction) {\n        case DIRECTION_NONE:\n            break;\n        case DIRECTION_LEFT:\n            name = 'left';\n            break;\n        case DIRECTION_RIGHT:\n            name = 'right';\n            break;\n        case DIRECTION_UP:\n            name = 'up';\n            break;\n        case DIRECTION_DOWN:\n            name = 'down';\n            break;\n        default:\n    }\n    return name;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}